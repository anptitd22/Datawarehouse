{"timestamp":"2025-06-14T16:30:18.530258","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-14T16:30:18.531534","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/etl_pipeline.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-14T16:30:18.942901","level":"warning","event":"/opt/airflow/dags/etl_dim_customer.py:21: UserWarning: MessageFactory class is deprecated. Please use GetMessageClass() instead of MessageFactory.GetPrototype. MessageFactory class will be removed after 2024.\n  CustomerMessage = factory.GetPrototype(descriptor)\n","logger":"py.warnings"}
{"timestamp":"2025-06-14T16:30:19.003140Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T16:30:19.003634Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T16:30:19.004011Z","level":"info","event":"Current task name:fact_sales_group.transform","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T16:30:19.004316Z","level":"info","event":"Dag name:etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T16:30:18.969587","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-06-14T16:30:19.006381","level":"info","event":"Connection Retrieved 'postgres_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-06-14T16:30:19.171562","level":"warning","event":"/opt/airflow/dags/etl_fact_sales.py:59: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(query, pg_conn)\n","logger":"py.warnings"}
{"timestamp":"2025-06-14T16:30:19.340996","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-06-14T16:30:19.359331","level":"info","event":"Connection Retrieved 'sqlserver_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-06-14T16:30:19.431090","level":"warning","event":"/opt/airflow/dags/etl_fact_sales.py:13: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  date_df = pd.read_sql(\"SELECT date, date_key FROM dim_date\", sql_conn)\n","logger":"py.warnings"}
{"timestamp":"2025-06-14T16:30:19.438686","level":"warning","event":"/opt/airflow/dags/etl_fact_sales.py:17: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  customer_df = pd.read_sql(\"SELECT client_id, customer_key FROM dim_customer\", sql_conn)\n","logger":"py.warnings"}
{"timestamp":"2025-06-14T16:30:19.476035","level":"warning","event":"/opt/airflow/dags/etl_fact_sales.py:21: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  product_df = pd.read_sql(\"SELECT product_id, product_key FROM dim_product\", sql_conn)\n","logger":"py.warnings"}
{"timestamp":"2025-06-14T16:30:19.483461","level":"warning","event":"/opt/airflow/dags/etl_fact_sales.py:25: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  order_df = pd.read_sql(\"SELECT order_id, order_key FROM dim_order\", sql_conn)\n","logger":"py.warnings"}
{"timestamp":"2025-06-14T16:30:19.513522Z","level":"info","event":"cẩn thận","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T16:30:19.516218","level":"info","event":"Done. Returned value was: Empty DataFrame\nColumns: [order_item_id, order_id, customer_key, product_key, date_key, order_key, quantity, unit_price, total_price, cost, revenue, profit]\nIndex: []","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-14T16:30:19.516501","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01976f46-cb96-72fb-8dbd-4ea5e6484fb1'), task_id='fact_sales_group.transform', dag_id='etl_pipeline', run_id='scheduled__2025-06-14T16:30:00+00:00', try_number=1, map_index=-1, hostname='b2bda57f10c1', context_carrier={}, task=<Task(PythonOperator): fact_sales_group.transform>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 6, 14, 16, 30, 17, 781590, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
{"timestamp":"2025-06-14T16:30:19.576927Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T16:30:19.577445Z","level":"info","event":" Previous state of the Task instance: running","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T16:30:19.577772Z","level":"info","event":"Task operator:<Task(PythonOperator): fact_sales_group.transform>","chan":"stdout","logger":"task"}
