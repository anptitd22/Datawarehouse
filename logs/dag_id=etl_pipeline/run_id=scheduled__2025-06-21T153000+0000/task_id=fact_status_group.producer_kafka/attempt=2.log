{"timestamp":"2025-06-21T15:51:46.556462","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-21T15:51:46.557072","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/etl_pipeline.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-21T15:51:47.174429Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:51:47.175284Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:51:47.175859Z","level":"info","event":"Current task name:fact_status_group.producer_kafka","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:51:47.176278Z","level":"info","event":"Dag name:etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:51:47.621122Z","level":"error","event":"WARNING: Using incubator modules: jdk.incubator.vector","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:48.888745Z","level":"error","event":":: loading settings :: url = jar:file:/home/airflow/.local/lib/python3.12/site-packages/pyspark/jars/ivy-2.5.3.jar!/org/apache/ivy/core/settings/ivysettings.xml","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:48.985182Z","level":"error","event":"Ivy Default Cache set to: /home/airflow/.ivy2.5.2/cache","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:48.986224Z","level":"error","event":"The jars for the packages stored in: /home/airflow/.ivy2.5.2/jars","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:48.991272Z","level":"error","event":"org.postgresql#postgresql added as a dependency","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:48.991907Z","level":"error","event":"org.apache.spark#spark-sql-kafka-0-10_2.12 added as a dependency","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:48.992770Z","level":"error","event":":: resolving dependencies :: org.apache.spark#spark-submit-parent-89c10e7a-ecf2-40f5-8f6d-4c16a415d2f8;1.0","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:48.993026Z","level":"error","event":"\tconfs: [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.114846Z","level":"error","event":"\tfound org.postgresql#postgresql;42.7.1 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.136653Z","level":"error","event":"\tfound org.checkerframework#checker-qual;3.41.0 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.202019Z","level":"error","event":"\tfound org.apache.spark#spark-sql-kafka-0-10_2.12;3.3.0 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.247069Z","level":"error","event":"\tfound org.apache.spark#spark-token-provider-kafka-0-10_2.12;3.3.0 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.274410Z","level":"error","event":"\tfound org.apache.kafka#kafka-clients;2.8.1 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.295386Z","level":"error","event":"\tfound org.lz4#lz4-java;1.8.0 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.314407Z","level":"error","event":"\tfound org.xerial.snappy#snappy-java;1.1.8.4 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.337247Z","level":"error","event":"\tfound org.slf4j#slf4j-api;1.7.32 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.364571Z","level":"error","event":"\tfound org.apache.hadoop#hadoop-client-runtime;3.3.2 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.378602Z","level":"error","event":"\tfound org.spark-project.spark#unused;1.0.0 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.402533Z","level":"error","event":"\tfound org.apache.hadoop#hadoop-client-api;3.3.2 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.423617Z","level":"error","event":"\tfound commons-logging#commons-logging;1.1.3 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.441865Z","level":"error","event":"\tfound com.google.code.findbugs#jsr305;3.0.0 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.455020Z","level":"error","event":"\tfound org.apache.commons#commons-pool2;2.11.1 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.514017Z","level":"error","event":":: resolution report :: resolve 477ms :: artifacts dl 44ms","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.514773Z","level":"error","event":"\t:: modules in use:","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.515201Z","level":"error","event":"\tcom.google.code.findbugs#jsr305;3.0.0 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.515659Z","level":"error","event":"\tcommons-logging#commons-logging;1.1.3 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.516021Z","level":"error","event":"\torg.apache.commons#commons-pool2;2.11.1 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.516367Z","level":"error","event":"\torg.apache.hadoop#hadoop-client-api;3.3.2 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.516697Z","level":"error","event":"\torg.apache.hadoop#hadoop-client-runtime;3.3.2 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.516991Z","level":"error","event":"\torg.apache.kafka#kafka-clients;2.8.1 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.517340Z","level":"error","event":"\torg.apache.spark#spark-sql-kafka-0-10_2.12;3.3.0 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.517686Z","level":"error","event":"\torg.apache.spark#spark-token-provider-kafka-0-10_2.12;3.3.0 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.518024Z","level":"error","event":"\torg.checkerframework#checker-qual;3.41.0 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.518344Z","level":"error","event":"\torg.lz4#lz4-java;1.8.0 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.518650Z","level":"error","event":"\torg.postgresql#postgresql;42.7.1 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.519051Z","level":"error","event":"\torg.slf4j#slf4j-api;1.7.32 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.519407Z","level":"error","event":"\torg.spark-project.spark#unused;1.0.0 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.519792Z","level":"error","event":"\torg.xerial.snappy#snappy-java;1.1.8.4 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.520111Z","level":"error","event":"\t---------------------------------------------------------------------","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.520442Z","level":"error","event":"\t|                  |            modules            ||   artifacts   |","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.520731Z","level":"error","event":"\t|       conf       | number| search|dwnlded|evicted|| number|dwnlded|","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.521018Z","level":"error","event":"\t---------------------------------------------------------------------","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.521268Z","level":"error","event":"\t|      default     |   14  |   0   |   0   |   0   ||   14  |   0   |","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.521584Z","level":"error","event":"\t---------------------------------------------------------------------","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.524148Z","level":"error","event":":: retrieving :: org.apache.spark#spark-submit-parent-89c10e7a-ecf2-40f5-8f6d-4c16a415d2f8","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.524821Z","level":"error","event":"\tconfs: [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.535154Z","level":"error","event":"\t0 artifacts copied, 14 already retrieved (0kB/10ms)","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.777591Z","level":"error","event":"25/06/21 15:51:49 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.961170Z","level":"error","event":"Using Spark's default log4j profile: org/apache/spark/log4j2-defaults.properties","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.961931Z","level":"error","event":"Setting default log level to \"WARN\".","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:49.962444Z","level":"error","event":"To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-21T15:51:54.543029","level":"info","event":"Thử lần 1/5 kiểm tra topic 'fact_status'...","logger":"kafka.build_kafka"}
{"timestamp":"2025-06-21T15:51:54.597628","level":"info","event":"Topic 'fact_status' đã tồn tại.","logger":"kafka.build_kafka"}
{"timestamp":"2025-06-21T15:51:54.700480","level":"info","event":"extract fact_status","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:51:56.205665","level":"info","event":"pivot để chuyển từ dòng thành cột theo trạng thái","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:51:57.176249","level":"info","event":"transform fact_status","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:51:59.634857","level":"info","event":"Số lượng bản ghi query được: 5000","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:51:59.672512Z","level":"info","event":"root","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:51:59.673514Z","level":"info","event":" |-- order_item_id: string (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:51:59.675343Z","level":"info","event":" |-- order_date: date (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:51:59.675894Z","level":"info","event":" |-- status: string (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:51:59.676461Z","level":"info","event":" |-- total_orders: long (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:51:59.677375Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:51:59.717597","level":"info","event":"Mapping dimension keys cho fact_status","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:51:59.720596","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-06-21T15:51:59.733261","level":"info","event":"Connection Retrieved 'sqlserver_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-06-21T15:51:59.797588","level":"warning","event":"/opt/airflow/dags/etl_fact_status.py:34: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  date_df = pd.read_sql(\"SELECT date, date_key FROM dim_date\", sql_conn)\n","logger":"py.warnings"}
{"timestamp":"2025-06-21T15:51:59.807275","level":"info","event":"object","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:51:59.811452","level":"warning","event":"/opt/airflow/dags/etl_fact_status.py:39: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  order_df = pd.read_sql(\"SELECT order_item_id, order_key FROM dim_order\", sql_conn)\n","logger":"py.warnings"}
{"timestamp":"2025-06-21T15:51:59.970530","level":"info","event":"Lọc bản ghi thiếu dimension keys","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:51:59.983362","level":"info","event":"Extract và transform fact_status thành công","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:02.207482","level":"info","event":"Tổng số bản ghi cần gửi: 5000","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:03.073977","level":"info","event":"Batch 1: 5000 bản ghi. Đang gửi lên Kafka...","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:07.194457","level":"info","event":"extract fact_status","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:07.266711","level":"info","event":"pivot để chuyển từ dòng thành cột theo trạng thái","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:07.692597","level":"info","event":"transform fact_status","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:07.906165","level":"info","event":"Số lượng bản ghi query được: 4342","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:07.927112Z","level":"info","event":"root","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:07.927798Z","level":"info","event":" |-- order_item_id: string (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:07.928294Z","level":"info","event":" |-- order_date: date (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:07.928893Z","level":"info","event":" |-- status: string (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:07.929369Z","level":"info","event":" |-- total_orders: long (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:07.929711Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:07.948273","level":"info","event":"Mapping dimension keys cho fact_status","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:07.948923","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-06-21T15:52:07.961342","level":"info","event":"Connection Retrieved 'sqlserver_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-06-21T15:52:07.992952","level":"warning","event":"/opt/airflow/dags/etl_fact_status.py:34: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  date_df = pd.read_sql(\"SELECT date, date_key FROM dim_date\", sql_conn)\n","logger":"py.warnings"}
{"timestamp":"2025-06-21T15:52:08.003167","level":"info","event":"object","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:08.006192","level":"warning","event":"/opt/airflow/dags/etl_fact_status.py:39: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  order_df = pd.read_sql(\"SELECT order_item_id, order_key FROM dim_order\", sql_conn)\n","logger":"py.warnings"}
{"timestamp":"2025-06-21T15:52:08.137301","level":"info","event":"Lọc bản ghi thiếu dimension keys","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:08.146810","level":"info","event":"Extract và transform fact_status thành công","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:09.369609","level":"info","event":"Tổng số bản ghi cần gửi: 4342","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:09.902057","level":"info","event":"Batch 2: 4342 bản ghi. Đang gửi lên Kafka...","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:11.541071","level":"info","event":"extract fact_status","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:11.563069","level":"info","event":"pivot để chuyển từ dòng thành cột theo trạng thái","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:11.675699","level":"info","event":"transform fact_status","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:11.782197","level":"info","event":"Số lượng bản ghi query được: 0","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:11.783446Z","level":"info","event":"root","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:11.783964Z","level":"info","event":" |-- order_item_id: string (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:11.784399Z","level":"info","event":" |-- order_date: date (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:11.784868Z","level":"info","event":" |-- status: string (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:11.785184Z","level":"info","event":" |-- total_orders: long (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:11.785570Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:11.800007","level":"info","event":"Mapping dimension keys cho fact_status","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:11.800389","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-06-21T15:52:11.832235","level":"info","event":"Connection Retrieved 'sqlserver_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-06-21T15:52:11.854239","level":"warning","event":"/opt/airflow/dags/etl_fact_status.py:34: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  date_df = pd.read_sql(\"SELECT date, date_key FROM dim_date\", sql_conn)\n","logger":"py.warnings"}
{"timestamp":"2025-06-21T15:52:11.859640","level":"info","event":"object","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:11.861858","level":"warning","event":"/opt/airflow/dags/etl_fact_status.py:39: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  order_df = pd.read_sql(\"SELECT order_item_id, order_key FROM dim_order\", sql_conn)\n","logger":"py.warnings"}
{"timestamp":"2025-06-21T15:52:11.942722","level":"info","event":"Lọc bản ghi thiếu dimension keys","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:11.948824","level":"info","event":"Extract và transform fact_status thành công","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:12.294631","level":"info","event":"Đã hết dữ liệu để push lên Kafka.","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:12.294919","level":"info","event":"Đã đẩy 9342 bản ghi lên Kafka.","logger":"dags.etl_fact_status"}
{"timestamp":"2025-06-21T15:52:13.302806","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-21T15:52:13.329371Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:13.329947Z","level":"info","event":" Previous state of the Task instance: running","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:13.330367Z","level":"info","event":"Task operator:<Task(PythonOperator): fact_status_group.producer_kafka>","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-21T15:52:13.735339Z","level":"error","event":"\r[Stage 3:>                                                          (0 + 1) / 1]\r\r                                                                                \r\r[Stage 10:>                                                         (0 + 1) / 1]\r\r                                                                                \r\r[Stage 16:>                                                         (0 + 1) / 1]\r\r[Stage 21:>                                                         (0 + 1) / 1]\r\r[Stage 22:>                                                         (0 + 1) / 1]","chan":"stderr","logger":"task"}
