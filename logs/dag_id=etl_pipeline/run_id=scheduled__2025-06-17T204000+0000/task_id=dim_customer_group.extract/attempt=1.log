{"timestamp":"2025-06-17T20:40:07.021548","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-17T20:40:07.022246","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/etl_pipeline.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-17T20:40:07.367186Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-17T20:40:07.372362Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-17T20:40:07.372790Z","level":"info","event":"Current task name:dim_customer_group.extract","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-17T20:40:07.372996Z","level":"info","event":"Dag name:etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-17T20:40:07.889627Z","level":"error","event":"WARNING: Using incubator modules: jdk.incubator.vector","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:09.715903Z","level":"error","event":":: loading settings :: url = jar:file:/home/airflow/.local/lib/python3.12/site-packages/pyspark/jars/ivy-2.5.3.jar!/org/apache/ivy/core/settings/ivysettings.xml","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:09.846678Z","level":"error","event":"Ivy Default Cache set to: /home/airflow/.ivy2.5.2/cache","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:09.847598Z","level":"error","event":"The jars for the packages stored in: /home/airflow/.ivy2.5.2/jars","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:09.854732Z","level":"error","event":"org.postgresql#postgresql added as a dependency","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:09.856239Z","level":"error","event":":: resolving dependencies :: org.apache.spark#spark-submit-parent-54a4ba1b-7205-48db-92ee-4b9a256fdf1d;1.0","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:09.857445Z","level":"error","event":"\tconfs: [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:09.996834Z","level":"error","event":"\tfound org.postgresql#postgresql;42.7.1 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.025841Z","level":"error","event":"\tfound org.checkerframework#checker-qual;3.41.0 in central","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.049084Z","level":"error","event":":: resolution report :: resolve 186ms :: artifacts dl 7ms","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.049994Z","level":"error","event":"\t:: modules in use:","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.050761Z","level":"error","event":"\torg.checkerframework#checker-qual;3.41.0 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.051541Z","level":"error","event":"\torg.postgresql#postgresql;42.7.1 from central in [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.053360Z","level":"error","event":"\t---------------------------------------------------------------------","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.054045Z","level":"error","event":"\t|                  |            modules            ||   artifacts   |","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.054518Z","level":"error","event":"\t|       conf       | number| search|dwnlded|evicted|| number|dwnlded|","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.055188Z","level":"error","event":"\t---------------------------------------------------------------------","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.055692Z","level":"error","event":"\t|      default     |   2   |   0   |   0   |   0   ||   2   |   0   |","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.056161Z","level":"error","event":"\t---------------------------------------------------------------------","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.060183Z","level":"error","event":":: retrieving :: org.apache.spark#spark-submit-parent-54a4ba1b-7205-48db-92ee-4b9a256fdf1d","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.060953Z","level":"error","event":"\tconfs: [default]","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.069816Z","level":"error","event":"\t0 artifacts copied, 2 already retrieved (0kB/9ms)","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.376797Z","level":"error","event":"25/06/17 20:40:10 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.666759Z","level":"error","event":"Using Spark's default log4j profile: org/apache/spark/log4j2-defaults.properties","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.667689Z","level":"error","event":"Setting default log level to \"WARN\".","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:10.668356Z","level":"error","event":"To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).","chan":"stderr","logger":"task"}
{"timestamp":"2025-06-17T20:40:28.099214","level":"info","event":"Done. Returned value was:                                  client_id  ... num_order\n0     0bd38138-d3ee-4648-b257-b85261abd775  ...       NaN\n1     f4a3e0cd-f7a1-435b-8f18-b2cdc9a305de  ...       NaN\n2     b684ab59-f28f-4a79-9f91-98f970bc499a  ...       NaN\n3     3822ae35-ab21-4ff2-8ca0-4ff3cadf75de  ...       NaN\n4     8ffb0f02-c902-4ccb-a87a-aaa65e4e1e56  ...       NaN\n...                                    ...  ...       ...\n1252  580dea16-cfe3-4830-ac20-e6322bc96529  ...       NaN\n1253  5be51a32-e63b-40a9-9df8-0489a2137820  ...       NaN\n1254  ae019577-bf73-4f7b-9114-c0603c278888  ...       NaN\n1255  6f3aba1f-c322-4476-9e5a-460fd23ba322  ...       NaN\n1256  e943ba67-a935-4923-bbda-8dba65db2af4  ...       NaN\n\n[1257 rows x 7 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-17T20:40:28.100868","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01977f9e-c40f-7554-a51c-e5ed1950408b'), task_id='dim_customer_group.extract', dag_id='etl_pipeline', run_id='scheduled__2025-06-17T20:40:00+00:00', try_number=1, map_index=-1, hostname='989485eb72a0', context_carrier={}, task=<Task(PythonOperator): dim_customer_group.extract>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 6, 17, 20, 40, 1, 697444, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
{"timestamp":"2025-06-17T20:40:28.148844Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-17T20:40:28.149545Z","level":"info","event":" Previous state of the Task instance: running","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-17T20:40:28.150575Z","level":"info","event":"Task operator:<Task(PythonOperator): dim_customer_group.extract>","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-17T20:40:28.748774Z","level":"error","event":"\r[Stage 0:>                                                          (0 + 1) / 1]","chan":"stderr","logger":"task"}
