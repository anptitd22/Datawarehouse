{"timestamp":"2025-06-14T05:40:06.796574","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-14T05:40:06.797904","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/etl_pipeline.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-14T05:40:06.980412Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T05:40:06.981984Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T05:40:06.983054Z","level":"info","event":"Current task name:dim_order_group.transform","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T05:40:06.983956Z","level":"info","event":"Dag name:etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T05:40:06.972359","level":"warning","event":"/opt/airflow/dags/etl_dim_order.py:6: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-06-14T05:40:07.052286","level":"info","event":"Done. Returned value was:                                   order_id  ... payment_method\n0     ceb75388-97e9-4ea6-a0d0-97960ef33d64  ...            COD\n1     ceb75388-97e9-4ea6-a0d0-97960ef33d64  ...            COD\n2     2b7c7eff-d3b5-40e1-a3d5-568292f41dc2  ...            COD\n3     2b7c7eff-d3b5-40e1-a3d5-568292f41dc2  ...            COD\n4     d233b98f-ec25-4b71-b8cf-8e126d07b706  ...          VNPAY\n...                                    ...  ...            ...\n9337  5828f23f-d5f3-40c5-9c1c-294017b16116  ...            COD\n9338  b70f9304-ad17-4969-a1aa-210c8d3ea2a0  ...            COD\n9339  b1cac294-8cf9-4e93-b85e-2ea953293d38  ...          VNPAY\n9340  d44d4ca9-d4c1-4518-868c-bb04c1486fc9  ...          VNPAY\n9341  182fe051-d954-4cea-a5e5-1a88f5c8d228  ...            COD\n\n[9342 rows x 4 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-14T05:40:07.053613","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01976cf3-b6f5-74fa-9bc5-40e39c882e7e'), task_id='dim_order_group.transform', dag_id='etl_pipeline', run_id='scheduled__2025-06-14T05:40:00+00:00', try_number=1, map_index=-1, hostname='6010199dfac5', context_carrier={}, task=<Task(PythonOperator): dim_order_group.transform>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 6, 14, 5, 40, 5, 673456, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
{"timestamp":"2025-06-14T05:40:07.124103Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T05:40:07.124998Z","level":"info","event":" Previous state of the Task instance: running","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-14T05:40:07.331209Z","level":"info","event":"Task operator:<Task(PythonOperator): dim_order_group.transform>","chan":"stdout","logger":"task"}
