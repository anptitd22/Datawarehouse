{"timestamp":"2025-06-13T19:50:03.831560","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-13T19:50:03.832417","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/etl_pipeline.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-13T19:50:04.004675Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T19:50:04.010074Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T19:50:04.010483Z","level":"info","event":"Current task name:transform_customer","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T19:50:04.010916Z","level":"info","event":"Dag name:etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T19:50:03.940303","level":"warning","event":"/opt/airflow/dags/etl_dim_customer.py:8: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  df = pd.read_sql(\"\"\"\n","logger":"py.warnings"}
{"timestamp":"2025-06-13T19:50:04.058355","level":"info","event":"Done. Returned value was:                                  client_id  ... num_order\n0     0bd38138-d3ee-4648-b257-b85261abd775  ...         4\n1     f4a3e0cd-f7a1-435b-8f18-b2cdc9a305de  ...         4\n2     b684ab59-f28f-4a79-9f91-98f970bc499a  ...         1\n3     3822ae35-ab21-4ff2-8ca0-4ff3cadf75de  ...         2\n4     8ffb0f02-c902-4ccb-a87a-aaa65e4e1e56  ...         2\n...                                    ...  ...       ...\n1252  580dea16-cfe3-4830-ac20-e6322bc96529  ...         5\n1253  5be51a32-e63b-40a9-9df8-0489a2137820  ...         4\n1254  ae019577-bf73-4f7b-9114-c0603c278888  ...         4\n1255  6f3aba1f-c322-4476-9e5a-460fd23ba322  ...         5\n1256  e943ba67-a935-4923-bbda-8dba65db2af4  ...         2\n\n[1257 rows x 7 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-13T19:50:04.060013","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01976ad7-8ddd-7c8a-a2d7-e29eed4666bc'), task_id='transform_customer', dag_id='etl_pipeline', run_id='scheduled__2025-06-13T19:50:00+00:00', try_number=1, map_index=-1, hostname='6b02a1a88b4d', context_carrier={}, task=<Task(PythonOperator): transform_customer>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 6, 13, 19, 50, 2, 990979, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
{"timestamp":"2025-06-13T19:50:04.115673Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T19:50:04.116269Z","level":"info","event":" Previous state of the Task instance: running","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T19:50:04.117225Z","level":"info","event":"Task operator:<Task(PythonOperator): transform_customer>","chan":"stdout","logger":"task"}
